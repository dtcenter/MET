name: Unit Tests

# Compile MET and run unit tests
# for pull requests into develop branch

on:
  pull_request:
    types: [opened, reopened]
    branches:
      - develop
  push:
    branches:
      - 'feature_1546_ci_testing'

jobs:

  job_control:
    name: Determine which jobs to run
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set job controls
        id: job_status
        run: .github/jobs/set_job_controls.sh
        env:
          commit_msg: ${{ github.event.head_commit.message }}

    outputs:
      run_compile: ${{ steps.job_status.outputs.run_compile }}
      run_push: ${{ steps.job_status.outputs.run_push }}
      run_unit_tests: ${{ steps.job_status.outputs.run_unit_tests }}
      run_diff: ${{ steps.job_status.outputs.run_diff }}
      run_update_truth: ${{ steps.job_status.outputs.run_update_truth }}
      met_base_image: ${{ steps.job_status.outputs.met_base_image }}
      dockerhub_repo: ${{ steps.job_status.outputs.dockerhub_repo }}
      branch_name: ${{ steps.job_status.outputs.branch_name }}

  compile:
    name: Compile MET
    runs-on: ubuntu-latest
    needs: job_control
    if: ${{ needs.job_control.outputs.run_compile == 'true' }}
    steps:
      - uses: actions/checkout@v2

      - name: Create directories to store output
        run: mkdir -p ${RUNNER_WORKSPACE}/logs

      - name: Compile MET in Docker
        run: .github/jobs/build_docker_image.sh
        env:
          DOCKERHUB_REPO: ${{ needs.job_control.outputs.dockerhub_repo }}
          SOURCE_BRANCH: ${{ needs.job_control.outputs.branch_name }}
          MET_BASE_IMAGE: ${{ needs.job_control.outputs.met_base_image }}

      - name: Copy Docker build log into logs directory
        if: always()
        run: cp ${GITHUB_WORKSPACE}/docker_build.log ${RUNNER_WORKSPACE}/logs/

      - name: Push Docker Image
        run: .github/jobs/push_docker_image.sh
        if: ${{ needs.job_control.outputs.run_push == 'true' }}
        env:
          DOCKERHUB_REPO: ${{ needs.job_control.outputs.dockerhub_repo }}
          SOURCE_BRANCH: ${{ needs.job_control.outputs.branch_name }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

      - name: Upload logs as artifact
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: logs
          path: ${{ runner.workspace }}/logs
          if-no-files-found: ignore

  unit_tests_1a:
    name: MET Unit Tests 1a
    runs-on: ubuntu-latest
    needs: [job_control, compile]
    if: ${{ needs.job_control.outputs.run_unit_tests == 'true' }}
    strategy:
      matrix:
        tests:
          - 'pcp_combine'
          - 'pb2nc'
          - 'ascii2nc'
          - 'madis2nc'
      fail-fast: false
    steps:
      - uses: actions/checkout@v2

      - name: Run Unit Tests in Docker
        run: .github/jobs/run_unit_docker.sh
        env:
          DOCKERHUB_REPO: ${{ needs.job_control.outputs.dockerhub_repo }}
          SOURCE_BRANCH: ${{ needs.job_control.outputs.branch_name }}
          TESTS: ${{ matrix.tests }}
          INPUT_DATA_VERSION: develop

      - name: Upload output as artifact
        uses: actions/upload-artifact@v2
        with:
          name: unit_tests_1a
          path: ${{ runner.workspace }}/output

      - name: Upload logs as artifact
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: logs
          path: ${{ runner.workspace }}/logs
          if-no-files-found: ignore

  unit_tests_1b:
    name: MET Unit Tests 1b
    runs-on: ubuntu-latest
    needs: [job_control, compile]
    if: ${{ needs.job_control.outputs.run_unit_tests == 'true' }}
    strategy:
      matrix:
        tests:
          - 'ref_config'
          - 'tc_dland tc_pairs tc_stat plot_tc tc_rmw rmw_analysis tc_gen'
          - 'met_test_scripts mode_graphics mtd regrid airnow gsi_tools netcdf modis series_analysis gen_ens_prod wwmca_regrid gen_vx_mask grid_weight interp_shape grid_diag grib_tables lidar2nc shift_data_plane trmm2nc aeronet wwmca_plot ioda2nc gaussian'
      fail-fast: false
    steps:
      - uses: actions/checkout@v2

      - name: Run Unit Tests in Docker
        run: .github/jobs/run_unit_docker.sh
        env:
          DOCKERHUB_REPO: ${{ needs.job_control.outputs.dockerhub_repo }}
          SOURCE_BRANCH: ${{ needs.job_control.outputs.branch_name }}
          TESTS: ${{ matrix.tests }}
          INPUT_DATA_VERSION: develop

      - name: Upload output as artifact
        uses: actions/upload-artifact@v2
        with:
          name: unit_tests_1b
          path: ${{ runner.workspace }}/output

      - name: Upload logs as artifact
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: logs
          path: ${{ runner.workspace }}/logs
          if-no-files-found: ignore

  unit_tests_2a:
    name: MET Unit Tests 2a
    runs-on: ubuntu-latest
    needs: [job_control, unit_tests_1a]
    if: ${{ needs.job_control.outputs.run_unit_tests == 'true' }}
    strategy:
      matrix:
        tests:
          - 'point_stat'
          - 'grid_stat'
          - 'wavelet_stat'
          - 'ensemble_stat'
      fail-fast: false
    steps:
      - uses: actions/checkout@v2

      - name: Download 1a output from artifact
        uses: actions/download-artifact@v2
        with:
          name: unit_tests_1a
          path: ${{ runner.workspace }}/output

      - name: Run Unit Tests in Docker
        run: .github/jobs/run_unit_docker.sh
        env:
          DOCKERHUB_REPO: ${{ needs.job_control.outputs.dockerhub_repo }}
          SOURCE_BRANCH: ${{ needs.job_control.outputs.branch_name }}
          TESTS: ${{ matrix.tests }}
          INPUT_DATA_VERSION: develop

      - name: Upload output as artifact
        uses: actions/upload-artifact@v2
        with:
          name: unit_tests_2a
          path: ${{ runner.workspace }}/output

      - name: Upload logs as artifact
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: logs
          path: ${{ runner.workspace }}/logs
          if-no-files-found: ignore

  unit_tests_2b:
    name: MET Unit Tests 2b
    runs-on: ubuntu-latest
    needs: [job_control, unit_tests_1a]
    if: ${{ needs.job_control.outputs.run_unit_tests == 'true' }}
    strategy:
      matrix:
        tests:
          - 'climatology'
          - 'python point2grid plot_data_plane mode mode_analysis perc_thresh hira plot_point_obs quality_filter obs_summary duplicate_flag'
      fail-fast: false
    steps:
      - uses: actions/checkout@v2

      - name: Download 1a output from artifact
        uses: actions/download-artifact@v2
        with:
          name: unit_tests_1a
          path: ${{ runner.workspace }}/output

      - name: Run Unit Tests in Docker
        run: .github/jobs/run_unit_docker.sh
        env:
          DOCKERHUB_REPO: ${{ needs.job_control.outputs.dockerhub_repo }}
          SOURCE_BRANCH: ${{ needs.job_control.outputs.branch_name }}
          TESTS: ${{ matrix.tests }}
          INPUT_DATA_VERSION: develop

      - name: Upload output as artifact
        uses: actions/upload-artifact@v2
        with:
          name: unit_tests_2b
          path: ${{ runner.workspace }}/output

      - name: Upload logs as artifact
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: logs
          path: ${{ runner.workspace }}/logs
          if-no-files-found: ignore


  unit_tests_3a:
    name: MET Unit Tests 3a
    runs-on: ubuntu-latest
    needs: [job_control, unit_tests_2a]
    if: ${{ needs.job_control.outputs.run_unit_tests == 'true' }}
    strategy:
      matrix:
        tests:
          - 'stat_analysis'
      fail-fast: false
    steps:
      - uses: actions/checkout@v2

      - name: Download 2a output from artifact
        uses: actions/download-artifact@v2
        with:
          name: unit_tests_2a
          path: ${{ runner.workspace }}/output

      - name: Run Unit Tests in Docker
        run: .github/jobs/run_unit_docker.sh
        env:
          DOCKERHUB_REPO: ${{ needs.job_control.outputs.dockerhub_repo }}
          SOURCE_BRANCH: ${{ needs.job_control.outputs.branch_name }}
          TESTS: ${{ matrix.tests }}
          INPUT_DATA_VERSION: develop

      - name: Upload output as artifact
        uses: actions/upload-artifact@v2
        with:
          name: unit_tests_3a
          path: ${{ runner.workspace }}/output

      - name: Upload logs as artifact
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: logs
          path: ${{ runner.workspace }}/logs
          if-no-files-found: ignore

  run_diffs:
    name: Check for Differences
    runs-on: ubuntu-latest
    needs: [job_control, unit_tests_1b, unit_tests_2b, unit_tests_3a]
    if: ${{ needs.job_control.outputs.run_diff == 'true' }}
    steps:
      - name: Download data from previous jobs
        uses: actions/download-artifact@v2

      - name: Copy test output into single directory
        run: |
          mkdir ${RUNNER_WORKSPACE}/output
          cp -r unit_tests_*/* ${RUNNER_WORKSPACE}/output/

      - name: Display output directory content
        run: ls -lh
        working-directory: ${{ runner.workspace }}/output

      - uses: actions/checkout@v2

      - name: Run Diff Tests in Docker
        run: .github/jobs/run_diff_docker.sh
        env:
          DOCKERHUB_REPO: ${{ needs.job_control.outputs.dockerhub_repo }}
          SOURCE_BRANCH: ${{ needs.job_control.outputs.branch_name }}
          TRUTH_DATA_VERSION: develop

      - name: Upload diff files as artifact
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: diff
          path: ${{ runner.workspace }}/diff
          if-no-files-found: ignore

      - name: Upload logs as artifact
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: logs
          path: ${{ runner.workspace }}/logs
          if-no-files-found: ignore

  update_truth:
    name: Update Truth Data
    runs-on: ubuntu-latest
    needs: [job_control, unit_tests_1b, unit_tests_2b, unit_tests_3a]
    if: ${{ needs.job_control.outputs.run_update_truth == 'true' }}
    steps:
      - uses: actions/checkout@v2

      - name: Download data from previous jobs
        uses: actions/download-artifact@v2

      - name: Copy test output into single directory
        run: |
          mkdir ${RUNNER_WORKSPACE}/met_test_truth
          cp -r unit_tests_*/* ${RUNNER_WORKSPACE}/met_test_truth/

      - name: Create Docker Data Volume
        run: .github/jobs/create_docker_truth.sh
        env:
          TRUTH_DATA_VERSION: develop
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
