////////////////////////////////////////////////////////////////////////////////
//
// TC-Gen configuration file.
//
// For additional information, please see the MET User's Guide.
//
////////////////////////////////////////////////////////////////////////////////

//
// ATCF file format reference:
//   http://www.nrlmry.navy.mil/atcf_web/docs/database/new/abrdeck.html
//

////////////////////////////////////////////////////////////////////////////////
//
// Genesis event definition criteria
//
////////////////////////////////////////////////////////////////////////////////

//
// Model initialization frequency in hours, starting at 0
//
init_freq = 6;

//
// Valid hour frequency to be analyzed in hours, starting at 0
//
valid_freq = 6;

//
// Forecast hours to be searched for genesis events
//
fcst_hr_window = {
   beg = 6;
   end = 120;
}

//
// Minimum track duration for genesis event in hours
//
min_duration = 12;

//
// Forecast genesis event criteria.  Defined as tracks reaching the specified
// intensity category, maximum wind speed threshold, and minimum sea-level
// pressure threshold.  The forecast genesis time is the valid time of the first
// track point where all of these criteria are met.
//
fcst_genesis = {
   vmax_thresh = NA;
   mslp_thresh = NA;
}

//
// BEST track genesis event criteria.  Defined as tracks reaching the specified
// intensity category, maximum wind speed threshold, and minimum sea-level
// pressure threshold.  The BEST track genesis time is the valid time of the
// first track point where all of these criteria are met.
//
best_genesis = {
   technique   = "BEST";
   category    = [ "TD", "TS" ];
   vmax_thresh = NA;
   mslp_thresh = NA;
}

//
// Operational track technique name
//
oper_technique = "CARQ";

////////////////////////////////////////////////////////////////////////////////
//
// Track filtering options
// May be specified separately in each filter array entry.
//
////////////////////////////////////////////////////////////////////////////////

//
// Array of dictionaries containing the track filtering options
// If empty, a single filter is defined using the top-level settings.
//
filter = [
   {
      desc = "ALL";
   },
   {
      desc          = "AL_BASIN";
      basin_mask    = "AL";
      nc_pairs_flag = TRUE;
      output_flag   = { genmpr = BOTH; }
   },
   {
      desc                 = "AL_MATCH24HR";
      basin_mask           = "AL";
      genesis_match_window = { beg = 0; end = 24; };
   },
   {
      desc                         = "AL_POINT2POINT";
      basin_mask                   = "AL";
      genesis_match_window         = { beg = 0; end = 24; };
      genesis_match_point_to_track = FALSE;
   },
   {
      desc          = "AL_DLAND_300NM";
      basin_mask    = "AL";
      dland_thresh  = >0&&<300;
   },
   {
      desc          = "EP_CP_BASIN";
      basin_mask    = [ "EP", "CP" ];
      nc_pairs_flag = TRUE;
      output_flag   = { genmpr = BOTH; }
   },
   {
      desc                 = "ALL_MATCH_600KM";
      genesis_match_radius = 600;
      dev_hit_radius       = 600;
      dev_method_flag      = TRUE;
      ops_method_flag      = TRUE;
   },
   {
      desc                 = "ALL_MATCH_600KM_DEV60HR";
      genesis_match_radius = 600;
      dev_hit_radius       = 600;
      dev_hit_window       = { beg = -60; end = 60; };
      dev_method_flag      = TRUE;
      ops_method_flag      = FALSE;
   },
   {
      desc                 = "ALL_MATCH_600KM_OPS60HR";
      genesis_match_radius = 600;
      ops_hit_window       = { beg = -60; end = 60; };
      dev_method_flag      = FALSE;
      ops_method_flag      = TRUE;
   }
];

//
// Description written to output DESC column
//
desc = "ALL";

//
// Forecast ATCF ID's
// If empty, all ATCF ID's found will be processed.
// Statistics will be generated separately for each ATCF ID.
//
model = [];

//
// BEST and operational track storm identifiers
//
storm_id = [];

//
// BEST and operational track storm names
//
storm_name = [];

//
// Forecast and operational initialization times to include or exclude
//
init_beg = "";
init_end = "";
init_inc = [];
init_exc = [];

//
// Forecast, BEST, and operational valid time window
//
valid_beg = "";
valid_end = "";

//
// Forecast and operational initialization hours
//
init_hour = [];

//
// Forecast and operational lead times in hours
//
lead = [];

//
// Spatial masking region (path to gridded data file or polyline file)
//
vx_mask = "";

//
// Spatial masking of hurricane basin names from the basin_file
//
basin_mask = [];

//
// Distance to land threshold
//
dland_thresh = NA;

////////////////////////////////////////////////////////////////////////////////
//
// Matching and scoring options
// May be specified separately in each filter array entry.
//
////////////////////////////////////////////////////////////////////////////////

//
// Genesis matching logic. Compare the forecast genesis point to all points in
// the Best track (TRUE) or the single Best track genesis point (FALSE).
//
genesis_match_point_to_track = TRUE;

//
// Radius in km to search for a matching genesis event
//
genesis_match_radius = 500;

//
// Time window in hours, relative to the model genesis time, to search for a
// matching Best track point
//
genesis_match_window = {
   beg = 0;
   end = 0;
}

//
// Radius in km for a development scoring method hit
//
dev_hit_radius = 500;

//
// Time window in hours, relative to the model genesis time, for a development 
// scoring method hit
//
dev_hit_window = {
   beg = -24;
   end =  24;
}

//
// Time window in hours for the Best track genesis minus model initialization
// time difference for an operational scoring method hit
//
ops_hit_window = {
   beg =  0;
   end = 48;
}

//
// Discard genesis forecasts for initializations at or after the matching
// BEST track genesis time
//
discard_init_post_genesis_flag = TRUE;

//
// Scoring methods to be applied
//
dev_method_flag = TRUE;
ops_method_flag = TRUE;

////////////////////////////////////////////////////////////////////////////////
//
// Output options
// May be specified separately in each filter array entry.
//
////////////////////////////////////////////////////////////////////////////////

//
// Confidence interval alpha value
//
ci_alpha = 0.05;

//
// Statistical output types
//
output_flag = {
   fho    = NONE;
   ctc    = BOTH; 
   cts    = BOTH;
   genmpr = NONE;
}

//
// NetCDF genesis pair counts
//
nc_pairs_flag = FALSE;

//
// Specify which track points should be counted by thresholding the track point
// valid time minus genesis time difference.
//
valid_minus_genesis_diff_thresh = NA;

//
// Count unique BEST track genesis event locations (TRUE) versus counting the
// location for all pairs (FALSE).
//
best_unique_flag = TRUE;

////////////////////////////////////////////////////////////////////////////////
//
// Global settings
// May only be specified once.
//
////////////////////////////////////////////////////////////////////////////////

//
// Specify the NetCDF output of the gen_dland tool containing a gridded
// representation of the minimum distance to land.
//
dland_file = "MET_BASE/tc_data/dland_global_tenth_degree.nc";

//
// Specify the NetCDF file containing a gridded representation of the
// global basins.
//
basin_file = "MET_BASE/tc_data/basin_global_tenth_degree.nc";

//
// NetCDF genesis pairs grid
//
nc_pairs_grid = "G003";

//
// Indicate a version number for the contents of this configuration file.
// The value should generally not be modified.
//
version = "V10.1.0";
