model_name: gfs
path_format: "/data/musgrave/METdiag/ida/gfs/{model_time:%Y%m%d%H}/{resolution}/\
    {model_name}.{model_time:%Y%m%d%H}.pgrb2.{resolution}.f\
    {forecast_time_hours:03d}"

resolution: 0p50
nested_grid_id: UNUSED
levels_hPa: [1000, 850, 700, 200]
forecast_hours: [0, 6]
# levels_hPa: [1000, 975, 950, 925, 900, 850, 800, 750, 700, 650, 600, 550, 500, 450, 400, 350, 300, 250, 200, 150, 100, 70, 50, 30, 20, 10]
# forecast_hours: [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84, 90, 96, 102, 108, 114, 120, 126]

# Need to specify which grib variable will be used to obtain the lon/lat
# grid
nav_var_name: t
nav_var_level: 1000
nav_var_level_type: isobaricInhPa
nav_var_is_surface: false
# Cylindrical grid specification
n_radii: 150
n_theta: 8
radii_step_km: 10
# ATCF file tech-ID to use to get the TC lon/lat
atcf_tech_id: AVNO
output_file_format: s{atcf_id}_{atcf_tech_id}_doper_{model_time:%Y%m%d%H_diag.dat}

# Specification entries that describe how to find variables in the grib file and
# optionally how to map them to their desired diag variable name.
input_var_specs:
    - {var_name: u, level_type: isobaricInhPa}
    - {var_name: v, level_type: isobaricInhPa}
    - {var_name: t, level_type: isobaricInhPa}
    - {var_name: r, level_type: isobaricInhPa}
    - {var_name: z, grib_name: gh, level_type: isobaricInhPa}
    - {var_name: t_surf, grib_name: 2t, level_type: heightAboveGround, is_surface: true, level: 2}
    - {var_name: r_surf, grib_name: 2r, level_type: heightAboveGround, is_surface: true, level: 2}
    - {var_name: p_surf, grib_name: prmsl, level_type: meanSea, is_surface: true, level: 0}
    - {var_name: u_surf, grib_name: 10u, level_type: heightAboveGround, is_surface: true, level: 10}
    - {var_name: v_surf, grib_name: 10v, level_type: heightAboveGround, is_surface: true, level: 10}
    - {var_name: tpw, grib_name: pwat, level_type: unknown, is_surface: true, select_name_only: true}
    - {var_name: sst, grib_name: t, level_type: surface, is_surface: true, level: 0}

# Convenience anchors
track_row_lookup_func: &track_func tc_diag_driver.diag_vars.track_row_lookup
area_avg_func: &area_avg_func tc_diag_driver.diag_vars.mean_in_radius_range
k_to_c: &k_to_c diag_lib.unit_conversion.kelvin_to_celsius
rad_tan_aavg_func: &rad_tan_aavg_func tc_diag_driver.diag_vars.radial_and_tangential_area_average
div_vort_func: &div_vort_func tc_diag_driver.diag_vars.divergence_vorticity
wind_min_km: &wind_min_km 0
wind_max_km: &wind_max_km 500
therm_min_km: &therm_min_km 200
therm_max_km: &therm_max_km 800

# Specification entries that descibe how to compute the pressure independent 
# variables.
pressure_independent_computation_specs:
    # We give each spec the name of a function that will be imported at run-time
    # and any parameters the function should be given.
    lat: {callable: *track_func, kwargs: {column_name: lat}}
    lon: {callable: *track_func, kwargs: {column_name: lon, convert_to_0_360: true}}
    maxwind: {callable: *track_func, kwargs: {column_name: vmax}}
    rmw: {callable: tc_diag_driver.diag_vars.average_rmw, kwargs: {u_surface_name: u_surf, v_surface_name: v_surf, radius_km: 500}}
    min_slp: {callable: *track_func, kwargs: {column_name: mslp}}
    t_surf: {callable: *area_avg_func, kwargs: {min_radius_km: *therm_min_km, max_radius_km: *therm_max_km, grib_var_name: t_surf, unit_converter: *k_to_c}}
    r_surf: {callable: *area_avg_func, kwargs: {min_radius_km: *therm_min_km, max_radius_km: *therm_max_km, grib_var_name: r_surf}}
    p_surf: {callable: *area_avg_func, kwargs: {min_radius_km: *therm_min_km, max_radius_km: *therm_max_km, grib_var_name: p_surf}}
    u_surf: {callable: *area_avg_func, kwargs: {min_radius_km: *wind_min_km, max_radius_km: *wind_max_km, grib_var_name: u_surf}}
    v_surf: {callable: *area_avg_func, kwargs: {min_radius_km: *wind_min_km, max_radius_km: *wind_max_km, grib_var_name: v_surf}}
    tpw: {callable: *area_avg_func, kwargs: {min_radius_km: 0, max_radius_km: 200, grib_var_name: tpw}}
    sst: {callable: *area_avg_func, kwargs: {min_radius_km: 0, max_radius_km: 50, grib_var_name: sst, unit_converter: *k_to_c}}
    ohc: {callable: tc_diag_driver.diag_vars.always_missing}
    land: {callable: tc_diag_driver.diag_vars.distance_to_land_lookup}
    storm_r_theta: {callable: tc_diag_driver.diag_vars.storm_r_theta, output_vars: [stm_spd, stm_hdg]}
    rad_tan_area_avg: {callable: *rad_tan_aavg_func, output_vars: [850radial, 850tang], kwargs: {u_name: u, v_name: v, level_hPa: 850, min_radius_km: 0, max_radius_km: 600}}
    div_vort_850: {callable: *div_vort_func, output_vars: [850dvrg, 850vort], kwargs: {u_name: u, v_name: v, level_hPa: 850, radius_km: 1000}}
    div_vort_200: {callable: *div_vort_func, output_vars: [200dvrg, 200vort], kwargs: {u_name: u, v_name: v, level_hPa: 200, radius_km: 1000}}
    

    # By default a computation spec has a "batch_order" of 0. You can control 
    # the order that the computations are performed in by setting the batch_order.
    # Here we need to set it to 1 because we need the "u" and "v" sounding 
    # computations to be performed before we can calculate the shear.
    # The shear function also returns a magnitude and heading, so we need to 
    # specify the names of the results returned by the function.
    shear: {batch_order: 1, callable: tc_diag_driver.diag_vars.shear, output_vars: [shr_mag, shr_hdg], kwargs: {u_name: u, v_name: v, bottom_hPa: 850, top_hPa: 200}}
    tgrd: {batch_order: 1, callable: tc_diag_driver.diag_vars.temperature_gradient, kwargs: {u_name: u, v_name: v, bottom_hPa: 850, top_hPa: 700}}

# Specification entries that descibe how to compute the sounding variables.
sounding_computation_specs:
    u: {callable: *area_avg_func, kwargs: {min_radius_km: *wind_min_km, max_radius_km: *wind_max_km, grib_var_name: u}}
    v: {callable: *area_avg_func, kwargs: {min_radius_km: *wind_min_km, max_radius_km: *wind_max_km, grib_var_name: v}}
    t: {callable: *area_avg_func, kwargs: {min_radius_km: *therm_min_km, max_radius_km: *therm_max_km, grib_var_name: t, unit_converter: *k_to_c}}
    r: {callable: *area_avg_func, kwargs: {min_radius_km: *therm_min_km, max_radius_km: *therm_max_km, grib_var_name: r}}
    z: {callable: *area_avg_func, kwargs: {min_radius_km: *therm_min_km, max_radius_km: *therm_max_km, grib_var_name: z}}

# Specification entries that describe how to output the variables.
# The variables will be output in the order they appear in inside this list.
mps_to_10kt: &mps_to_10kt 19.44
mps_to_kt: &mps_to_kt 1.944
mps_to_10mps: &mps_to_10mps 10
c_to_10c: &c_to_10c 10
p_to_hPa: &p_to_hPa 0.01
m_to_dm: &m_to_dm 0.1
div_vort_scale: &div_vort_scale 10000000
tgrd_scale: &tgrd_scale 10000000

output_specs:
    - {var_name: lat, units: deg, output_type: storm, output_float: true}
    - {var_name: lon, units: deg, output_type: storm, output_float: true}
    - {var_name: maxwind, units: kt, output_type: storm}
    - {var_name: rmw, units: km, output_type: storm}
    - {var_name: min_slp, units: mb, output_type: storm}
    - {var_name: shr_mag, units: kt, scale_factor: *mps_to_kt, output_type: storm}
    - {var_name: shr_hdg, units: deg, output_type: storm}
    - {var_name: stm_spd, units: kt, output_type: storm}
    - {var_name: stm_hdg, units: deg, output_type: storm}
    - {var_name: sst, units: 10c, scale_factor: *c_to_10c, output_type: storm}
    - {var_name: ohc, units: KJ/CM2, output_type: storm}
    - {var_name: tpw, units: mm, output_type: storm}
    - {var_name: land, units: km, output_type: storm}
    - {var_name: 850tang, units: 10M/S, scale_factor: *mps_to_10mps, output_type: storm}
    - {var_name: 850vort, units: /S, scale_factor: *div_vort_scale, output_type: storm}
    - {var_name: 200dvrg, units: /S, scale_factor: *div_vort_scale, output_type: storm}

    - {var_name: t_surf, units: 10c, scale_factor: *c_to_10c, output_type: surface}
    - {var_name: r_surf, units: "%", output_type: surface}
    - {var_name: p_surf, units: "mb", scale_factor: *p_to_hPa, output_type: surface}
    - {var_name: u_surf, units: 10kt, scale_factor: *mps_to_10kt, output_type: surface}
    - {var_name: v_surf, units: 10kt, scale_factor: *mps_to_10kt, output_type: surface}
    - {var_name: t, units: 10c, scale_factor: *c_to_10c, output_type: sounding}
    - {var_name: r, units: "%", output_type: sounding}
    - {var_name: z, units: DM, scale_factor: *m_to_dm, output_type: sounding}
    - {var_name: u, units: 10kt, scale_factor: *mps_to_10kt, output_type: sounding}
    - {var_name: v, units: 10kt, scale_factor: *mps_to_10kt, output_type: sounding}

    - {var_name: tgrd, units: "10^7C/M", scale_factor: *tgrd_scale, output_type: custom}



