<?xml version="1.0"?>
<!DOCTYPE met_test [
  <!ENTITY MET_BASE       "${MET_BASE}">
  <!ENTITY MET_BIN        "${MET_BASE}/../../bin">
  <!ENTITY MET_DATA       "${MET_BUILD_BASE}/data">
  <!ENTITY TEST_DIR       "${MET_TEST_BASE}">
  <!ENTITY INPUT_DIR      "${MET_TEST_INPUT}">
  <!ENTITY OUTPUT_DIR     "${MET_TEST_OUTPUT}">
  <!ENTITY MET_PYTHON_EXE "${MET_TEST_MET_PYTHON_EXE}">
  <!ENTITY ANACONDA_BIN   "/usr/local/anaconda3-20190923/bin">

  <!ENTITY CONFIG_DIR      "&TEST_DIR;/config">
  <!ENTITY DATA_DIR_PYTHON "&INPUT_DIR;/python">
  <!ENTITY DATA_DIR_MODEL  "&INPUT_DIR;/model_data">
  <!ENTITY DATA_DIR_OBS    "&INPUT_DIR;/obs_data">
]>

<!-- Requires: unit_ascii2nc.xml unit_pb2nc.xml unit_pcp_combine.xml -->

<met_test>

  <test_dir>&TEST_DIR;</test_dir>
  <exit_on_fail>true</exit_on_fail>

  <!-- Define a named grid -->
  <test name="python_numpy_grid_name">
    <exec>&MET_BIN;/plot_data_plane</exec>
    <env>
      <pair><name>PYTHON_GRID</name> <value>G212</value></pair>
    </env>
    <param> \
      PYTHON_NUMPY \
      &OUTPUT_DIR;/python/letter_numpy_grid_name.ps \
      'name = "&MET_BASE;/python/read_ascii_numpy_grid.py &DATA_DIR_PYTHON;/letter.txt LETTER";' \
      -plot_range 0.0 255.0 \
      -title "Grid Name: 'G212'" \
      -v 1
    </param>
    <output>
      <ps>&OUTPUT_DIR;/python/letter_numpy_grid_name.ps</ps>
    </output>
  </test>

  <!-- Define a grid specification string -->
  <test name="python_numpy_grid_string">
    <exec>&MET_BIN;/plot_data_plane</exec>
    <env>
      <pair>
        <name>PYTHON_GRID</name>
        <value>lambert 185 129 12.19 -133.459 -95 40.635 6371.2 25 25 N</value>
      </pair>
    </env>
    <param> \
      PYTHON_NUMPY \
      &OUTPUT_DIR;/python/letter_numpy_grid_string.ps \
      'name = "&MET_BASE;/python/read_ascii_numpy_grid.py &DATA_DIR_PYTHON;/letter.txt LETTER";' \
      -plot_range 0.0 255.0 \
      -title "Grid String: 'lambert 185 129 12.19 -133.459 -95 40.635 6371.2 25 25 N'" \
      -v 1
    </param>
    <output>
      <ps>&OUTPUT_DIR;/python/letter_numpy_grid_string.ps</ps>
    </output>
  </test>

  <!-- Define the grid using a gridded data file -->
  <test name="python_numpy_grid_data_file">
    <exec>&MET_BIN;/plot_data_plane</exec>
    <env>
      <pair>
        <name>PYTHON_GRID</name>
        <value>&MET_DATA;/sample_fcst/2005080700/wrfprs_ruc13_12.tm00_G212</value></pair>
    </env>
    <param> \
      PYTHON_NUMPY \
      &OUTPUT_DIR;/python/letter_numpy_grid_data_file.ps \
      'name = "&MET_BASE;/python/read_ascii_numpy_grid.py &DATA_DIR_PYTHON;/letter.txt LETTER";' \
      -plot_range 0.0 255.0 \
      -title "Gridded Data File: 'wrfprs_ruc13_12.tm00_G212'" \
      -v 1
    </param>
    <output>
      <ps>&OUTPUT_DIR;/python/letter_numpy_grid_data_file.ps</ps>
    </output>
  </test>
  
  <!-- Invokes Python script that reads in NUMPY text data -->
  <test name="python_numpy_plot_data_plane">
    <exec>&MET_BIN;/plot_data_plane</exec>
    <param> \
      PYTHON_NUMPY \
      &OUTPUT_DIR;/python/letter_numpy.ps \
      'name = "&MET_BASE;/python/read_ascii_numpy.py &DATA_DIR_PYTHON;/letter.txt LETTER";' \
      -plot_range 0.0 255.0 \
      -title "Python enabled numpy plot_data_plane" \
      -v 1
    </param>
    <output>
      <ps>&OUTPUT_DIR;/python/letter_numpy.ps</ps>
    </output>
  </test>

  <test name="python_xarray_plot_data_plane">
    <exec>&MET_BIN;/plot_data_plane</exec>
    <param> \
      PYTHON_XARRAY \
      &OUTPUT_DIR;/python/letter_xarray.ps \
      'name = "&MET_BASE;/python/read_ascii_xarray.py &DATA_DIR_PYTHON;/letter.txt LETTER";' \
      -plot_range 0.0 255.0 \
      -title "Python enabled xarray plot_data_plane" \
      -v 1
    </param>
    <output>
      <ps>&OUTPUT_DIR;/python/letter_xarray.ps</ps>
    </output>
  </test>

  <test name="python_numpy_plot_data_plane_file_type">
    <exec>&MET_BIN;/plot_data_plane</exec>
    <param> \
      &DATA_DIR_PYTHON;/letter.txt \
      &OUTPUT_DIR;/python/letter_file_type.ps \
      'name = "&MET_BASE;/python/read_ascii_numpy.py MET_PYTHON_INPUT_ARG LETTER"; file_type=PYTHON_NUMPY;' \
      -plot_range 0.0 255.0 \
      -title "Python enabled plot_data_plane using file_type option" \
      -v 1
    </param>
    <output>
      <ps>&OUTPUT_DIR;/python/letter_file_type.ps</ps>
    </output>
  </test>

  <test name="python_numpy_mode_mixed">
    <exec>&MET_BIN;/mode</exec>
    <env>
      <pair><name>OBS_COMMAND</name> <value>&MET_BASE;/python/read_ascii_numpy.py &DATA_DIR_PYTHON;/obs.txt OBS</value></pair>
    </env>
    <param> \
      &OUTPUT_DIR;/pcp_combine/arw-tom-gep0_2012040912_F030_APCP06.nc \
      PYTHON_NUMPY \
      &CONFIG_DIR;/MODEConfig_python_mixed \
      -outdir &OUTPUT_DIR;/python -v 1
    </param>
    <output>
      <ps>&OUTPUT_DIR;/python/mode_python_mixed_300000L_20120410_180000V_060000A.ps</ps>
      <txt>&OUTPUT_DIR;/python/mode_python_mixed_300000L_20120410_180000V_060000A_cts.txt</txt>
      <txt>&OUTPUT_DIR;/python/mode_python_mixed_300000L_20120410_180000V_060000A_obj.txt</txt>
      <nc>&OUTPUT_DIR;/python/mode_python_mixed_300000L_20120410_180000V_060000A_obj.nc</nc>
    </output>
  </test>

  <test name="python_numpy_mode">
    <exec>&MET_BIN;/mode</exec>
    <env>
      <pair><name>FCST_COMMAND</name> <value>&MET_BASE;/python/read_ascii_numpy.py &DATA_DIR_PYTHON;/fcst.txt FCST</value></pair>
      <pair><name>OBS_COMMAND</name>  <value>&MET_BASE;/python/read_ascii_numpy.py &DATA_DIR_PYTHON;/obs.txt OBS</value></pair>
    </env>
    <param> \
      PYTHON_NUMPY \
      PYTHON_NUMPY \
      &CONFIG_DIR;/MODEConfig_python \
      -outdir &OUTPUT_DIR;/python -v 1
    </param>
    <output>
      <ps>&OUTPUT_DIR;/python/mode_python_120000L_20050807_120000V_120000A.ps</ps>
      <txt>&OUTPUT_DIR;/python/mode_python_120000L_20050807_120000V_120000A_obj.txt</txt>
      <txt>&OUTPUT_DIR;/python/mode_python_120000L_20050807_120000V_120000A_cts.txt</txt>
      <nc>&OUTPUT_DIR;/python/mode_python_120000L_20050807_120000V_120000A_obj.nc</nc>
    </output>
  </test>

  <test name="python_numpy_grid_stat_mixed">
    <exec>&MET_BIN;/grid_stat</exec>
    <env>
      <pair><name>OBS_COMMAND</name>  <value>&MET_BASE;/python/read_ascii_numpy.py &DATA_DIR_PYTHON;/obs.txt OBS</value></pair>
    </env>
    <param> \
      &DATA_DIR_MODEL;/grib1/nam_st4/nam_2012040900_F012_gSt4.grib \
      PYTHON_NUMPY \
      &CONFIG_DIR;/GridStatConfig_python_mixed \
      -outdir &OUTPUT_DIR;/python -v 1
    </param>
    <output>
      <txt>&OUTPUT_DIR;/python/grid_stat_python_mixed_120000L_20120409_120000V.stat</txt>
      <nc>&OUTPUT_DIR;/python/grid_stat_python_mixed_120000L_20120409_120000V_pairs.nc</nc>
    </output>
  </test>

  <test name="python_numpy_grid_stat">
    <exec>&MET_BIN;/grid_stat</exec>
    <env>
      <pair><name>FCST_COMMAND</name> <value>&MET_BASE;/python/read_ascii_numpy.py &DATA_DIR_PYTHON;/fcst.txt FCST</value></pair>
      <pair><name>OBS_COMMAND</name>  <value>&MET_BASE;/python/read_ascii_numpy.py &DATA_DIR_PYTHON;/obs.txt OBS</value></pair>
    </env>
    <param> \
      PYTHON_NUMPY \
      PYTHON_NUMPY \
      &CONFIG_DIR;/GridStatConfig_python \
      -outdir &OUTPUT_DIR;/python -v 1
    </param>
    <output>
      <nc>&OUTPUT_DIR;/python/grid_stat_python_120000L_20050807_120000V_pairs.nc</nc>
    </output>
  </test>

  <test name="python_numpy_point_stat">
    <exec>&MET_BIN;/point_stat</exec>
    <env>
      <pair><name>FCST_COMMAND</name> <value>&MET_BASE;/python/read_ascii_numpy.py &DATA_DIR_PYTHON;/fcst.txt FCST</value></pair>
      <pair><name>OBS_COMMAND</name>  <value>&MET_BASE;/python/read_ascii_numpy.py &DATA_DIR_PYTHON;/obs.txt OBS</value></pair>
    </env>
    <param> \
      PYTHON_NUMPY \
      &OUTPUT_DIR;/pb2nc/gdas1.20120409.t12z.prepbufr.nc \
      &CONFIG_DIR;/PointStatConfig_python \
      -obs_valid_beg 20120409_113000 -obs_valid_end 20120409_123000 \
      -outdir &OUTPUT_DIR;/python -v 1
    </param>
    <output>
      <nc>&OUTPUT_DIR;/python/point_stat_python_120000L_20120409_120000V.stat</nc>
    </output>
  </test>

  <test name="python_numpy_wavelet_stat">
    <exec>&MET_BIN;/wavelet_stat</exec>
    <env>
      <pair><name>FCST_COMMAND</name> <value>&MET_BASE;/python/read_ascii_numpy.py &DATA_DIR_PYTHON;/fcst.txt FCST</value></pair>
      <pair><name>OBS_COMMAND</name>  <value>&MET_BASE;/python/read_ascii_numpy.py &DATA_DIR_PYTHON;/obs.txt OBS</value></pair>
    </env>
    <param> \
      PYTHON_NUMPY \
      PYTHON_NUMPY \
      &CONFIG_DIR;/WaveletStatConfig_python \
      -outdir &OUTPUT_DIR;/python -v 1
    </param>
    <output>
      <stat>&OUTPUT_DIR;/python/wavelet_stat_python_120000L_20050807_120000V.stat</stat>
      <txt>&OUTPUT_DIR;/python/wavelet_stat_python_120000L_20050807_120000V_isc.txt</txt>
      <grid_nc>&OUTPUT_DIR;/python/wavelet_stat_python_120000L_20050807_120000V.nc</grid_nc>
      <ps>&OUTPUT_DIR;/python/wavelet_stat_python_120000L_20050807_120000V.ps</ps>
    </output>
  </test>

  <test name="python_numpy_wavelet_stat_mixed">
    <exec>&MET_BIN;/wavelet_stat</exec>
    <env>
      <pair><name>FCST_COMMAND</name> <value>&MET_BASE;/python/read_ascii_numpy.py &DATA_DIR_PYTHON;/fcst.txt FCST</value></pair>
    </env>
    <param> \
      PYTHON_NUMPY \
      &DATA_DIR_MODEL;/grib1/nam_st4/nam_2012040900_F012_gSt4.grib \
      &CONFIG_DIR;/WaveletStatConfig_python_mixed \
      -outdir &OUTPUT_DIR;/python -v 1
    </param>
    <output>
      <stat>&OUTPUT_DIR;/python/wavelet_stat_python_mixed_120000L_20050807_120000V.stat</stat>
      <txt>&OUTPUT_DIR;/python/wavelet_stat_python_mixed_120000L_20050807_120000V_isc.txt</txt>
      <grid_nc>&OUTPUT_DIR;/python/wavelet_stat_python_mixed_120000L_20050807_120000V.nc</grid_nc>
      <ps>&OUTPUT_DIR;/python/wavelet_stat_python_mixed_120000L_20050807_120000V.ps</ps>
    </output>
  </test>

  <test name="python_numpy_regrid_data_plane">
    <exec>&MET_BIN;/regrid_data_plane</exec>
    <param> \
      PYTHON_NUMPY \
      G130 \
      &OUTPUT_DIR;/python/regrid_data_plane.nc \
      -field 'name="&MET_BASE;/python/read_ascii_numpy.py &DATA_DIR_PYTHON;/fcst.txt FCST";' \
      -v 1
    </param>
    <output>
      <grid_nc>&OUTPUT_DIR;/python/regrid_data_plane.nc</grid_nc>
    </output>
  </test>

  <test name="python_numpy_shift_data_plane">
    <exec>&MET_BIN;/shift_data_plane</exec>
    <param> \
      PYTHON_NUMPY \
      &OUTPUT_DIR;/python/shift_data_plane.nc \
      'name="&MET_BASE;/python/read_ascii_numpy.py &DATA_DIR_PYTHON;/fcst.txt FCST";' \
      -from 30 -110 -to 35 -115 \
      -v 1
    </param>
    <output>
      <grid_nc>&OUTPUT_DIR;/python/shift_data_plane.nc</grid_nc>
    </output>
  </test>

  <test name="python_numpy_shift_data_plane_input_arg">
    <exec>&MET_BIN;/shift_data_plane</exec>
    <param> \
      &DATA_DIR_PYTHON;/fcst.txt \
      &OUTPUT_DIR;/python/shift_data_plane_input_arg.nc \
      'name="&MET_BASE;/python/read_ascii_numpy.py MET_PYTHON_INPUT_ARG FCST"; file_type=PYTHON_NUMPY;' \
      -from 30 -110 -to 35 -115 \
      -v 1
    </param>
    <output>
      <grid_nc>&OUTPUT_DIR;/python/shift_data_plane_input_arg.nc</grid_nc>
    </output>
  </test>

  <test name="python_numpy_series_analysis">
    <exec>&MET_BIN;/series_analysis</exec>
    <env>
      <pair><name>FCST_COMMAND</name> <value>&MET_BASE;/python/read_ascii_numpy.py MET_PYTHON_INPUT_ARG FCST</value></pair>
      <pair><name>OBS_COMMAND</name>  <value>&MET_BASE;/python/read_ascii_numpy.py MET_PYTHON_INPUT_ARG OBS</value></pair>
    </env>
    <param> \
      -fcst &DATA_DIR_PYTHON;/fcst.txt &DATA_DIR_PYTHON;/fcst.txt \
      -obs  &DATA_DIR_PYTHON;/obs.txt  &DATA_DIR_PYTHON;/obs.txt  \
      -paired \
      -config &CONFIG_DIR;/SeriesAnalysisConfig_python \
      -out &OUTPUT_DIR;/python/series_analysis.nc \
      -v 1
    </param>
    <output>
      <grid_nc>&OUTPUT_DIR;/python/series_analysis.nc</grid_nc>
    </output>
  </test>

  <test name="python_numpy_mtd">
    <exec>&MET_BIN;/mtd</exec>
    <env>
      <pair><name>FCST_COMMAND</name>  <value>&MET_BASE;/python/read_ascii_numpy.py MET_PYTHON_INPUT_ARG FCST</value></pair>
      <pair><name>OBS_COMMAND</name>   <value>&MET_BASE;/python/read_ascii_numpy.py MET_PYTHON_INPUT_ARG OBS</value></pair>
      <pair><name>OUTPUT_PREFIX</name> <value>PYTHON</value></pair>
    </env>
    <param> \
      -fcst &DATA_DIR_PYTHON;/fcst.txt &DATA_DIR_PYTHON;/fcst.txt \
      -obs  &DATA_DIR_PYTHON;/obs.txt  &DATA_DIR_PYTHON;/obs.txt  \
      -config &CONFIG_DIR;/MTDConfig_python \
      -outdir &OUTPUT_DIR;/python \
      -v 1
    </param>
    <output>
      <exist>&OUTPUT_DIR;/python/mtd_PYTHON_20050807_120000V_2d.txt</exist>
      <exist>&OUTPUT_DIR;/python/mtd_PYTHON_20050807_120000V_3d_single_simple.txt</exist>
      <exist>&OUTPUT_DIR;/python/mtd_PYTHON_20050807_120000V_3d_pair_simple.txt</exist>
      <exist>&OUTPUT_DIR;/python/mtd_PYTHON_20050807_120000V_3d_single_cluster.txt</exist>
      <exist>&OUTPUT_DIR;/python/mtd_PYTHON_20050807_120000V_3d_pair_cluster.txt</exist>
      <grid_nc>&OUTPUT_DIR;/python/mtd_PYTHON_20050807_120000V_obj.nc</grid_nc>
    </output>
  </test>

  <test name="python_numpy_ensemble_stat">
    <exec>&MET_BIN;/ensemble_stat</exec>
    <env>
      <pair><name>FCST_COMMAND</name>  <value>&MET_BASE;/python/read_ascii_numpy.py MET_PYTHON_INPUT_ARG FCST</value></pair>
      <pair><name>OBS_COMMAND</name>   <value>&MET_BASE;/python/read_ascii_numpy.py MET_PYTHON_INPUT_ARG OBS</value></pair>
      <pair><name>OUTPUT_PREFIX</name> <value>PYTHON</value></pair>
    </env>
    <param> \
      2 &DATA_DIR_PYTHON;/fcst.txt &DATA_DIR_PYTHON;/fcst.txt \
      -grid_obs &DATA_DIR_PYTHON;/obs.txt \
      &CONFIG_DIR;/EnsembleStatConfig_python \
      -outdir &OUTPUT_DIR;/python \
      -v 1
    </param>
    <output>
      <stat>&OUTPUT_DIR;/python/ensemble_stat_PYTHON_20050807_120000V.stat</stat>
      <grid_nc>&OUTPUT_DIR;/python/ensemble_stat_PYTHON_20050807_120000V_ens.nc</grid_nc>
    </output>
  </test>
  
  <!-- Invokes Python script to read point data  -->
  <test name="python_ascii2nc">
    <exec>&MET_BIN;/ascii2nc</exec>
    <param> \
      "&MET_BASE;/python/read_ascii_point.py &MET_DATA;/sample_obs/ascii/sample_ascii_obs.txt" \
      &OUTPUT_DIR;/python/ascii2nc_python.nc \
      -format python
    </param>
    <output>
      <point_nc>&OUTPUT_DIR;/python/ascii2nc_python.nc</point_nc>
    </output>
  </test>

  <!-- Invokes Python script to read point data using variable name strings  -->
  <test name="python_ascii2nc_varname">
    <exec>&MET_BIN;/ascii2nc</exec>
    <param> \
      "&MET_BASE;/python/read_ascii_point.py &MET_DATA;/sample_obs/ascii/sample_ascii_obs_varname.txt" \
      &OUTPUT_DIR;/python/ascii2nc_python_varname.nc \
      -format python
    </param>
    <output>
      <point_nc>&OUTPUT_DIR;/python/ascii2nc_python_varname.nc</point_nc>
    </output>
  </test>

  <!-- Invokes Python script to pass MPR data to Stat-Analysis  -->
  <test name="python_stat_analysis">
    <exec>&MET_BIN;/stat_analysis</exec>
    <param> \
      -lookin python &MET_BASE;/python/read_ascii_mpr.py &OUTPUT_DIR;/python/point_stat_120000L_20050807_120000V.stat \
      -job aggregate_stat -line_type MPR -out_line_type sl1l2 -by FCST_VAR \
      -out_stat &OUTPUT_DIR;/python/stat_analysis_python_AGGR_MPR_to_SL1L2.stat
    </param>
    <output>
      <stat>&OUTPUT_DIR;/python/stat_analysis_python_AGGR_MPR_to_SL1L2.stat</stat>
    </output>
  </test>

  <!-- Invokes user-python logic to read a grid string -->
  <test name="python_numpy_grid_name_user_python">
    <exec>echo "MET_PYTHON_EXE=&MET_PYTHON_EXE;"; \
          &MET_BIN;/plot_data_plane</exec>
    <env>
      <pair><name>MET_PYTHON_EXE</name> <value>&MET_PYTHON_EXE;</value></pair>
      <pair><name>PYTHON_GRID</name> <value>G212</value></pair>
    </env>
    <param> \
      PYTHON_NUMPY \
      &OUTPUT_DIR;/python/letter_numpy_grid_name_user_python.ps \
      'name = "&MET_BASE;/python/read_ascii_numpy_grid.py &DATA_DIR_PYTHON;/letter.txt LETTER";' \
      -plot_range 0.0 255.0 \
      -title "Grid Name: 'G212'" \
      -v 1
    </param>
    <output>
      <ps>&OUTPUT_DIR;/python/letter_numpy_grid_name_user_python.ps</ps>
    </output>
  </test>
 
  <!-- Invokes user-python logic to read point data  -->
  <test name="python_ascii2nc_user_python">
    <exec>echo "MET_PYTHON_EXE=&MET_PYTHON_EXE;"; \
          &MET_BIN;/ascii2nc</exec>
    <env>
       <pair><name>MET_PYTHON_EXE</name> <value>&MET_PYTHON_EXE;</value></pair>
    </env>
    <param> \
      "&MET_BASE;/python/read_ascii_point.py &MET_DATA;/sample_obs/ascii/sample_ascii_obs.txt" \
      &OUTPUT_DIR;/python/ascii2nc_user_python.nc \
      -format python
    </param>
    <output>
      <point_nc>&OUTPUT_DIR;/python/ascii2nc_user_python.nc</point_nc>
    </output>
  </test>

  <!-- Invokes user-python logic to read NUMPY text data -->
  <test name="python_numpy_plot_data_plane_user_python">
    <exec>export PATH='&ANACONDA_BIN;:${PATH}'; \
          echo "MET_PYTHON_EXE=&MET_PYTHON_EXE;"; \
          &MET_BIN;/plot_data_plane</exec>
    <env>
       <pair><name>MET_PYTHON_EXE</name> <value>&MET_PYTHON_EXE;</value></pair>
    </env>
    <param> \
      PYTHON_NUMPY \
      &OUTPUT_DIR;/python/letter_user_python.ps \
      'name = "&MET_BASE;/python/read_ascii_numpy.py &DATA_DIR_PYTHON;/letter.txt LETTER";' \
      -plot_range 0.0 255.0 \
      -title "Python enabled plot_data_plane" \
      -v 1
    </param>
    <output>
      <ps>&OUTPUT_DIR;/python/letter_user_python.ps</ps>
    </output>
  </test>

  <!-- Invokes user-python logic to pass MPR data to Stat-Analysis  -->
  <test name="python_stat_analysis_user_python">
    <exec>echo "MET_PYTHON_EXE=&MET_PYTHON_EXE;"; \
          &MET_BIN;/stat_analysis</exec>
    <env>
       <pair><name>MET_PYTHON_EXE</name> <value>&MET_PYTHON_EXE;</value></pair>
    </env>
    <param> \
      -lookin python &MET_BASE;/python/read_ascii_mpr.py &OUTPUT_DIR;/python/point_stat_120000L_20050807_120000V.stat \
      -job aggregate_stat -line_type MPR -out_line_type sl1l2 -by FCST_VAR \
      -out_stat &OUTPUT_DIR;/python/stat_analysis_user_python_AGGR_MPR_to_SL1L2.stat
    </param>
    <output>
      <stat>&OUTPUT_DIR;/python/stat_analysis_user_python_AGGR_MPR_to_SL1L2.stat</stat>
    </output>
  </test>

  <test name="python_point2grid_pb2nc_TMP">
    <exec>&MET_BIN;/point2grid</exec>
    <param> \
      'PYTHON_NUMPY=&MET_BASE;/python/read_met_point_obs.py &OUTPUT_DIR;/pb2nc/ndas.20120409.t12z.prepbufr.tm00.nc' \
      G212 \
      &OUTPUT_DIR;/python/pb2nc_TMP.nc \
      -field 'name="TMP"; level="*"; valid_time="20120409_120000"; censor_thresh=[ &lt;0 ]; censor_val=[0];' \
      -name TEMP \
      -v 1
    </param>
    <output>
      <grid_nc>&OUTPUT_DIR;/python/pb2nc_TMP.nc</grid_nc>
    </output>
  </test>

  <test name="python_plot_point_obs_CONFIG_XXX">
    <exec>&MET_BIN;/plot_point_obs</exec>
    <env>
      <pair><name>TO_GRID</name> <value>NONE</value></pair>
    </env>
    <param> \
      &OUTPUT_DIR;/pb2nc/ndas.20120409.t12z.prepbufr.tm00.nc \
      &OUTPUT_DIR;/python/nam_and_ndas.20120409.t12z.prepbufr_CONFIG.ps \
      -point_obs &OUTPUT_DIR;/ascii2nc/trmm_2012040912_3hr.nc \
      -plot_grid &DATA_DIR_MODEL;/grib2/nam/nam_2012040900_F012.grib2 \
      -config &CONFIG_DIR;/PlotPointObsConfig \
      -title "NAM 2012040900 F12 vs NDAS 500mb RH and TRMM 3h > 0" \
      -v 3
    </param>
    <output>
      <ps>&OUTPUT_DIR;/python/nam_and_ndas.20120409.t12z.prepbufr_CONFIG.ps</ps>
    </output>
  </test>

  <test name="python_plot_point_obs_CONFIG">
    <exec>&MET_BIN;/plot_point_obs</exec>
    <env>
      <pair><name>TO_GRID</name> <value>NONE</value></pair>
    </env>
    <param> \
      'PYTHON_NUMPY=&MET_BASE;/python/read_met_point_obs.py &OUTPUT_DIR;/pb2nc/ndas.20120409.t12z.prepbufr.tm00.nc' \
      &OUTPUT_DIR;/python/nam_and_ndas.20120409.t12z.prepbufr_CONFIG.ps \
      -point_obs 'PYTHON_NUMPY=&MET_BASE;/python/read_met_point_obs.py &OUTPUT_DIR;/ascii2nc/trmm_2012040912_3hr.nc' \
      -plot_grid &DATA_DIR_MODEL;/grib2/nam/nam_2012040900_F012.grib2 \
      -config &CONFIG_DIR;/PlotPointObsConfig \
      -title "NAM 2012040900 F12 vs NDAS 500mb RH and TRMM 3h > 0" \
      -v 3
    </param>
    <output>
      <ps>&OUTPUT_DIR;/python/nam_and_ndas.20120409.t12z.prepbufr_CONFIG.ps</ps>
    </output>
  </test>

  <test name="python_ensemble_stat_FILE_LIST">
    <exec>echo "&DATA_DIR_MODEL;/grib1/arw-fer-gep1/arw-fer-gep1_2012040912_F024.grib \
                &DATA_DIR_MODEL;/grib1/arw-fer-gep5/arw-fer-gep5_2012040912_F024.grib \
                &DATA_DIR_MODEL;/grib1/arw-sch-gep2/arw-sch-gep2_2012040912_F024.grib \
                &DATA_DIR_MODEL;/grib1/arw-sch-gep6/arw-sch-gep6_2012040912_F024.grib \
                &DATA_DIR_MODEL;/grib1/arw-tom-gep3/arw-tom-gep3_2012040912_F024.grib \
                &DATA_DIR_MODEL;/grib1/arw-tom-gep7/arw-tom-gep7_2012040912_F024.grib" \
                > &OUTPUT_DIR;/python/ensemble_stat/input_file_list; \
          &MET_BIN;/ensemble_stat</exec>
    <env>
      <pair><name>DESC</name>           <value>NA</value></pair>
      <pair><name>OBS_ERROR_FLAG</name> <value>FALSE</value></pair>
      <pair><name>SKIP_CONST</name>     <value>FALSE</value></pair>
      <pair><name>OUTPUT_PREFIX</name>  <value>FILE_LIST</value></pair>
    </env>
    <param> \
      &OUTPUT_DIR;/python/ensemble_stat/input_file_list \
      &CONFIG_DIR;/EnsembleStatConfig \
      -grid_obs &DATA_DIR_OBS;/laps/laps_2012041012_F000.grib \
      -point_obs 'PYTHON_NUMPY=&MET_BASE;/python/read_met_point_obs.py &OUTPUT_DIR;/ascii2nc/gauge_2012041012_24hr.nc' \
      -outdir &OUTPUT_DIR;/python/ensemble_stat -v 1
    </param>
    <output>
      <stat>&OUTPUT_DIR;/python/ensemble_stat/ensemble_stat_FILE_LIST_20120410_120000V.stat</stat>
      <stat>&OUTPUT_DIR;/python/ensemble_stat/ensemble_stat_FILE_LIST_20120410_120000V_ecnt.txt</stat>
      <stat>&OUTPUT_DIR;/python/ensemble_stat/ensemble_stat_FILE_LIST_20120410_120000V_rhist.txt</stat>
      <stat>&OUTPUT_DIR;/python/ensemble_stat/ensemble_stat_FILE_LIST_20120410_120000V_phist.txt</stat>
      <stat>&OUTPUT_DIR;/python/ensemble_stat/ensemble_stat_FILE_LIST_20120410_120000V_orank.txt</stat>
      <stat>&OUTPUT_DIR;/python/ensemble_stat/ensemble_stat_FILE_LIST_20120410_120000V_ssvar.txt</stat>
      <grid_nc>&OUTPUT_DIR;/python/ensemble_stat/ensemble_stat_FILE_LIST_20120410_120000V_ens.nc</grid_nc>
      <grid_nc>&OUTPUT_DIR;/python/ensemble_stat/ensemble_stat_FILE_LIST_20120410_120000V_orank.nc</grid_nc>
    </output>
  </test>

  <test name="python_point_stat_GRIB1_NAM_GDAS_WINDS">
    <exec>&MET_BIN;/point_stat</exec>
    <env>
      <pair><name>BEG_DS</name>         <value>-1800</value></pair>
      <pair><name>END_DS</name>         <value>1800</value></pair>
      <pair><name>OUTPUT_PREFIX</name>  <value>GRIB1_NAM_GDAS_WINDS</value></pair>
      <pair><name>CONFIG_DIR</name>     <value>&CONFIG_DIR;</value></pair>
      <pair><name>CLIMO_FILE</name>     <value>"&DATA_DIR_MODEL;/grib1/gfs/gfs_2012040900_F012_gNam.grib"</value></pair>
    </env>
    <param> \
      &DATA_DIR_MODEL;/grib1/nam/nam_2012040900_F012.grib \
      'PYTHON_NUMPY=&MET_BASE;/python/read_met_point_obs.py &OUTPUT_DIR;/pb2nc/gdas1.20120409.t12z.prepbufr.nc' \
      &CONFIG_DIR;/PointStatConfig_WINDS \
      -outdir &OUTPUT_DIR;/python -v 1
    </param>
    <output>
      <stat>&OUTPUT_DIR;/python/point_stat_GRIB1_NAM_GDAS_WINDS_120000L_20120409_120000V.stat</stat>
    </output>
  </test>

  <test name="python_plot_data_plane_SEMILATLON_ZONAL_MEAN">
    <exec>&MET_BIN;/plot_data_plane</exec>
    <param> \
    PYTHON_NUMPY \
    &OUTPUT_DIR;/python/wrfout_d01_2008-08-08_12:00:00_PLEV_ZONAL_MEAN.ps \
    'name="&MET_BASE;/python/derive_WRF_semilatlon.py &DATA_DIR_MODEL;/p_interp/wrfout_d01_2008-08-08_12:00:00_PLEV TT lat";' \
    -title "WRF Zonal Mean" \
    -v 1
    </param>
    <output>
      <ps>&OUTPUT_DIR;/python/wrfout_d01_2008-08-08_12:00:00_PLEV_ZONAL_MEAN.ps</ps>
    </output>
  </test>

  <test name="python_pcp_combine_SEMILATLON_MERIDIONAL_MEAN">
    <exec>&MET_BIN;/pcp_combine</exec>
    <param> \
    -add PYTHON_NUMPY \
    'name="&MET_BASE;/python/derive_WRF_semilatlon.py &DATA_DIR_MODEL;/p_interp/wrfout_d01_2008-08-08_12:00:00_PLEV TT lon";' \
    &OUTPUT_DIR;/python/wrfout_d01_2008-08-08_12:00:00_PLEV_MERIDIONAL_MEAN.nc \
    -name "TT_MERIDIONAL_MEAN" -v 1
    </param>
    <output>
      <grid_nc>&OUTPUT_DIR;/python/wrfout_d01_2008-08-08_12:00:00_PLEV_MERIDIONAL_MEAN.nc</grid_nc>
    </output>
  </test>

  <test name="python_plot_data_plane_SEMILATLON_MERIDIONAL_MEAN">
    <exec>&MET_BIN;/plot_data_plane</exec>
    <param> \
    &OUTPUT_DIR;/python/wrfout_d01_2008-08-08_12:00:00_PLEV_MERIDIONAL_MEAN.nc \
    &OUTPUT_DIR;/python/wrfout_d01_2008-08-08_12:00:00_PLEV_MERIDIONAL_MEAN.ps \
    'name="TT_MERIDIONAL_MEAN"; level="(*,*)";' \
    -title "WRF Meridional Mean" \
    -v 1
    </param>
    <output>
      <ps>&OUTPUT_DIR;/python/wrfout_d01_2008-08-08_12:00:00_PLEV_MERIDIONAL_MEAN.ps</ps>
    </output>
  </test>

</met_test>
